import sys, numpy as np
from keras.datasets import mnist

(x_train, y_train),(x_test, y_test) = mnist.load_data()

images = x_train[0:1000].reshape(1000, 28*28) / 255
labels = y_train[0:1000]

one_hot_labels = np.zeros((len(labels), 10))
for i, l in enumerate(labels): # One-hot encoding the train labels
    one_hot_labels[i][l] = 1
labels = one_hot_labels

test_images = x_test.reshape(len(x_test), 28*28) / 255
test_labels = np.zeros((len(y_test), 10))
for i, l in enumerate(y_test): # One-hot encoding the test labels
    test_labels[i][l] = 1

def tanh(x):     #Defining the hyperbolic tangent activation function (for the hidden layer/s)
    return np.tanh(x)

def tanh2derivative(output):  #The tanh's derivative
    return 1 - (output**2)
    
def softmax(x):
    temp = np.exp(x)
    return temp / np.sum(temp, axis=1, keepdims=True)

alpha, iterations, hidden_n = (2, 300, 100)
px_per_img, n_labels = (784, 10)
batch_size = 100

weights_0 = 0.02 * np.random.random((px_per_img, hidden_n)) -0.01
weights_1 = 0.02 * np.random.random((hidden_n, n_labels)) - 0.01

for j in range(iterations):
    correct_count =  0
    for i in range(int(len(images) / batch_size)):
        batch_start, batch_end = ((i * batch_size), ((i+1) * batch_size))
        
        layer_0 = images[batch_start: batch_end]
        layer_1 = tanh(np.dot(layer_0, weights_0))
        dropout_mask = np.random.randint(2, size=layer_1.shape)
        layer_1 *= dropout_mask * 2
        layer_2 = softmax(np.dot(layer_1, weights_1))

        for k in range(batch_size):
            correct_count += int(np.argmax(layer_2[k:k+1]) == np.argmax(labels[batch_start+k: batch_start+(k+1)]))

        layer2_delta = (labels[batch_start:batch_end] - layer_2) / (batch_size * layer_2.shape[0])
        layer1_delta = layer2_delta.dot(weights_1.T) * tanh2derivative(layer_1)

        weights_1 += alpha * layer_1.T.dot(layer2_delta)
        weights_0 += alpha * layer_0.T.dot(layer1_delta)
    test_correct_count = 0

    for i in range(len(test_images)):
        layer_0 = test_images[i: i+1]
        layer_1 = tanh(np.dot(layer_0, weights_0))
        layer_2 = np.dot(layer_1, weights_1)
        test_correct_count += int(np.argmax(layer_2) == np.argmax(test_labels[i: i+1]))


    if (j%10 == 0):
        sys.stdout.write("\n"+ \
                         " I:" + str(j) + \
                         " Test-Accuracy:" + str(test_correct_count/ float(len(test_images))) +\
                         " Train-Accuracy:" + str(correct_count / float(len(images)))
                        )
    

